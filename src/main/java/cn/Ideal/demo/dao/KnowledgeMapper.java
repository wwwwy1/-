package cn.Ideal.demo.dao;

import cn.Ideal.demo.entity.Knowledge;
import org.apache.ibatis.annotations.*;
import org.apache.ibatis.type.JdbcType;
import org.springframework.stereotype.Component;

@Component
public interface KnowledgeMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table knowledge
     *
     * @mbggenerated Wed May 22 18:37:34 GMT+08:00 2019
     */
    @Delete({
        "delete from knowledge",
        "where kId = #{kid,jdbcType=INTEGER}"
    })
    int deleteByPrimaryKey(Integer kid);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table knowledge
     *
     * @mbggenerated Wed May 22 18:37:34 GMT+08:00 2019
     */
    @Insert({
        "insert into knowledge (kId, kOne, ",
        "kTwo, kThree, kFour, ",
        "kFive, kSix, kSeven, ",
        "kEight, kNine, kTen, ",
        "uId)",
        "values (#{kid,jdbcType=INTEGER}, #{kone,jdbcType=INTEGER}, ",
        "#{ktwo,jdbcType=INTEGER}, #{kthree,jdbcType=INTEGER}, #{kfour,jdbcType=INTEGER}, ",
        "#{kfive,jdbcType=INTEGER}, #{ksix,jdbcType=INTEGER}, #{kseven,jdbcType=INTEGER}, ",
        "#{keight,jdbcType=INTEGER}, #{knine,jdbcType=INTEGER}, #{kten,jdbcType=INTEGER}, ",
        "#{uid,jdbcType=INTEGER})"
    })
    int insert(Knowledge record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table knowledge
     *
     * @mbggenerated Wed May 22 18:37:34 GMT+08:00 2019
     */
    @InsertProvider(type=KnowledgeSqlProvider.class, method="insertSelective")
    int insertSelective(Knowledge record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table knowledge
     *
     * @mbggenerated Wed May 22 18:37:34 GMT+08:00 2019
     */
    @Select({
        "select",
        "kId, kOne, kTwo, kThree, kFour, kFive, kSix, kSeven, kEight, kNine, kTen, uId",
        "from knowledge",
        "where kId = #{kid,jdbcType=INTEGER}"
    })
    @Results({
        @Result(column="kId", property="kid", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="kOne", property="kone", jdbcType=JdbcType.INTEGER),
        @Result(column="kTwo", property="ktwo", jdbcType=JdbcType.INTEGER),
        @Result(column="kThree", property="kthree", jdbcType=JdbcType.INTEGER),
        @Result(column="kFour", property="kfour", jdbcType=JdbcType.INTEGER),
        @Result(column="kFive", property="kfive", jdbcType=JdbcType.INTEGER),
        @Result(column="kSix", property="ksix", jdbcType=JdbcType.INTEGER),
        @Result(column="kSeven", property="kseven", jdbcType=JdbcType.INTEGER),
        @Result(column="kEight", property="keight", jdbcType=JdbcType.INTEGER),
        @Result(column="kNine", property="knine", jdbcType=JdbcType.INTEGER),
        @Result(column="kTen", property="kten", jdbcType=JdbcType.INTEGER),
        @Result(column="uId", property="uid", jdbcType=JdbcType.INTEGER)
    })
    Knowledge selectByPrimaryKey(Integer kid);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table knowledge
     *
     * @mbggenerated Wed May 22 18:37:34 GMT+08:00 2019
     */
    @UpdateProvider(type=KnowledgeSqlProvider.class, method="updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(Knowledge record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table knowledge
     *
     * @mbggenerated Wed May 22 18:37:34 GMT+08:00 2019
     */
    @Update({
        "update knowledge",
        "set kOne = #{kone,jdbcType=INTEGER},",
          "kTwo = #{ktwo,jdbcType=INTEGER},",
          "kThree = #{kthree,jdbcType=INTEGER},",
          "kFour = #{kfour,jdbcType=INTEGER},",
          "kFive = #{kfive,jdbcType=INTEGER},",
          "kSix = #{ksix,jdbcType=INTEGER},",
          "kSeven = #{kseven,jdbcType=INTEGER},",
          "kEight = #{keight,jdbcType=INTEGER},",
          "kNine = #{knine,jdbcType=INTEGER},",
          "kTen = #{kten,jdbcType=INTEGER},",
          "uId = #{uid,jdbcType=INTEGER}",
        "where kId = #{kid,jdbcType=INTEGER}"
    })
    int updateByPrimaryKey(Knowledge record);














    @Update({
            "update knowledge",
            "set kOne = 10,",
            "kTwo = 10,",
            "kThree = 10,",
            "kFour = 10,",
            "kFive = 10,",
            "kSix = 10,",
            "kSeven = 10,",
            "kEight = 10,",
            "kNine = 10,",
            "kTen = 10",
            "where uId = #{uid,jdbcType=INTEGER}"
    })
    int initHaveKnowledge(Integer uid);

    @Insert({
            "insert into knowledge (kId, kOne, ",
            "kTwo, kThree, kFour, ",
            "kFive, kSix, kSeven, ",
            "kEight, kNine, kTen, ",
            "uId)",
            "values (#{kid,jdbcType=INTEGER}, #{kone,jdbcType=INTEGER}, ",
            "#{ktwo,jdbcType=INTEGER}, #{kthree,jdbcType=INTEGER}, #{kfour,jdbcType=INTEGER}, ",
            "#{kfive,jdbcType=INTEGER}, #{ksix,jdbcType=INTEGER}, #{kseven,jdbcType=INTEGER}, ",
            "#{keight,jdbcType=INTEGER}, #{knine,jdbcType=INTEGER}, #{kten,jdbcType=INTEGER}, ",
            "#{uid,jdbcType=INTEGER})"
    })
    int initNotHaveKnowledge(Knowledge record);


    @Select({
            "select",
            "kId, kOne, kTwo, kThree, kFour, kFive, kSix, kSeven, kEight, kNine, kTen, uId",
            "from knowledge",
            "where uId = #{uid,jdbcType=INTEGER}"
    })
    @Results({
            @Result(column="kId", property="kid", jdbcType=JdbcType.INTEGER, id=true),
            @Result(column="kOne", property="kone", jdbcType=JdbcType.INTEGER),
            @Result(column="kTwo", property="ktwo", jdbcType=JdbcType.INTEGER),
            @Result(column="kThree", property="kthree", jdbcType=JdbcType.INTEGER),
            @Result(column="kFour", property="kfour", jdbcType=JdbcType.INTEGER),
            @Result(column="kFive", property="kfive", jdbcType=JdbcType.INTEGER),
            @Result(column="kSix", property="ksix", jdbcType=JdbcType.INTEGER),
            @Result(column="kSeven", property="kseven", jdbcType=JdbcType.INTEGER),
            @Result(column="kEight", property="keight", jdbcType=JdbcType.INTEGER),
            @Result(column="kNine", property="knine", jdbcType=JdbcType.INTEGER),
            @Result(column="kTen", property="kten", jdbcType=JdbcType.INTEGER),
            @Result(column="uId", property="uid", jdbcType=JdbcType.INTEGER)
    })
    Knowledge selectByUid(Integer uid);
}