package cn.Ideal.demo.dao;

import cn.Ideal.demo.entity.Quality;
import org.apache.ibatis.annotations.*;
import org.apache.ibatis.type.JdbcType;
import org.springframework.stereotype.Component;

@Component
public interface QualityMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table quality
     *
     * @mbggenerated Wed May 22 18:37:34 GMT+08:00 2019
     */
    @Delete({
        "delete from quality",
        "where qId = #{qid,jdbcType=INTEGER}"
    })
    int deleteByPrimaryKey(Integer qid);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table quality
     *
     * @mbggenerated Wed May 22 18:37:34 GMT+08:00 2019
     */
    @Insert({
        "insert into quality (qId, qOne, ",
        "qTwo, qThree, qFour, ",
        "qFive, qSix, qSeven, ",
        "qEight, qNine, uId)",
        "values (#{qid,jdbcType=INTEGER}, #{qone,jdbcType=INTEGER}, ",
        "#{qtwo,jdbcType=INTEGER}, #{qthree,jdbcType=INTEGER}, #{qfour,jdbcType=INTEGER}, ",
        "#{qfive,jdbcType=INTEGER}, #{qsix,jdbcType=INTEGER}, #{qseven,jdbcType=INTEGER}, ",
        "#{qeight,jdbcType=INTEGER}, #{qnine,jdbcType=INTEGER}, #{uid,jdbcType=INTEGER})"
    })
    int insert(Quality record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table quality
     *
     * @mbggenerated Wed May 22 18:37:34 GMT+08:00 2019
     */
    @InsertProvider(type=QualitySqlProvider.class, method="insertSelective")
    int insertSelective(Quality record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table quality
     *
     * @mbggenerated Wed May 22 18:37:34 GMT+08:00 2019
     */
    @Select({
        "select",
        "qId, qOne, qTwo, qThree, qFour, qFive, qSix, qSeven, qEight, qNine, uId",
        "from quality",
        "where qId = #{qid,jdbcType=INTEGER}"
    })
    @Results({
        @Result(column="qId", property="qid", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="qOne", property="qone", jdbcType=JdbcType.INTEGER),
        @Result(column="qTwo", property="qtwo", jdbcType=JdbcType.INTEGER),
        @Result(column="qThree", property="qthree", jdbcType=JdbcType.INTEGER),
        @Result(column="qFour", property="qfour", jdbcType=JdbcType.INTEGER),
        @Result(column="qFive", property="qfive", jdbcType=JdbcType.INTEGER),
        @Result(column="qSix", property="qsix", jdbcType=JdbcType.INTEGER),
        @Result(column="qSeven", property="qseven", jdbcType=JdbcType.INTEGER),
        @Result(column="qEight", property="qeight", jdbcType=JdbcType.INTEGER),
        @Result(column="qNine", property="qnine", jdbcType=JdbcType.INTEGER),
        @Result(column="uId", property="uid", jdbcType=JdbcType.INTEGER)
    })
    Quality selectByPrimaryKey(Integer qid);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table quality
     *
     * @mbggenerated Wed May 22 18:37:34 GMT+08:00 2019
     */
    @UpdateProvider(type=QualitySqlProvider.class, method="updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(Quality record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table quality
     *
     * @mbggenerated Wed May 22 18:37:34 GMT+08:00 2019
     */
    @Update({
        "update quality",
        "set qOne = #{qone,jdbcType=INTEGER},",
          "qTwo = #{qtwo,jdbcType=INTEGER},",
          "qThree = #{qthree,jdbcType=INTEGER},",
          "qFour = #{qfour,jdbcType=INTEGER},",
          "qFive = #{qfive,jdbcType=INTEGER},",
          "qSix = #{qsix,jdbcType=INTEGER},",
          "qSeven = #{qseven,jdbcType=INTEGER},",
          "qEight = #{qeight,jdbcType=INTEGER},",
          "qNine = #{qnine,jdbcType=INTEGER},",
          "uId = #{uid,jdbcType=INTEGER}",
        "where qId = #{qid,jdbcType=INTEGER}"
    })
    int updateByPrimaryKey(Quality record);




    @Update({
            "update quality",
            "set qOne =10,",
            "qTwo = 10,",
            "qThree = 10,",
            "qFour = 10,",
            "qFive = 10,",
            "qSix = 10,",
            "qSeven = 10,",
            "qEight = 10,",
            "qNine = 10",
            "where uId = #{uid,jdbcType=INTEGER}"
    })
    int initHaveQuality(Integer uid);

    @Insert({
            "insert into quality (qId, qOne, ",
            "qTwo, qThree, qFour, ",
            "qFive, qSix, qSeven, ",
            "qEight, qNine, uId)",
            "values (#{qid,jdbcType=INTEGER}, #{qone,jdbcType=INTEGER}, ",
            "#{qtwo,jdbcType=INTEGER}, #{qthree,jdbcType=INTEGER}, #{qfour,jdbcType=INTEGER}, ",
            "#{qfive,jdbcType=INTEGER}, #{qsix,jdbcType=INTEGER}, #{qseven,jdbcType=INTEGER}, ",
            "#{qeight,jdbcType=INTEGER}, #{qnine,jdbcType=INTEGER}, #{uid,jdbcType=INTEGER})"
    })
    int initNotHaveQuality(Quality record);


    @Select({
            "select",
            "qId, qOne, qTwo, qThree, qFour, qFive, qSix, qSeven, qEight, qNine, uId",
            "from quality",
            "where uId = #{uid,jdbcType=INTEGER}"
    })
    @Results({
            @Result(column="qId", property="qid", jdbcType=JdbcType.INTEGER, id=true),
            @Result(column="qOne", property="qone", jdbcType=JdbcType.INTEGER),
            @Result(column="qTwo", property="qtwo", jdbcType=JdbcType.INTEGER),
            @Result(column="qThree", property="qthree", jdbcType=JdbcType.INTEGER),
            @Result(column="qFour", property="qfour", jdbcType=JdbcType.INTEGER),
            @Result(column="qFive", property="qfive", jdbcType=JdbcType.INTEGER),
            @Result(column="qSix", property="qsix", jdbcType=JdbcType.INTEGER),
            @Result(column="qSeven", property="qseven", jdbcType=JdbcType.INTEGER),
            @Result(column="qEight", property="qeight", jdbcType=JdbcType.INTEGER),
            @Result(column="qNine", property="qnine", jdbcType=JdbcType.INTEGER),
            @Result(column="uId", property="uid", jdbcType=JdbcType.INTEGER)
    })
    Quality selectByUid(Integer uid);


}